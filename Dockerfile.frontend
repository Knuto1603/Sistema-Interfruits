# ===================================
# Dockerfile para Frontend (Angular)
# Build estático + Nginx optimizado
# ===================================

# Etapa 1: Build de Angular
FROM node:20-alpine AS build

WORKDIR /app

# Copiar package files para aprovechar cache de Docker
COPY apps/frontend/package*.json ./
COPY apps/frontend/bun.lock ./

# Instalar dependencias
RUN npm ci --only=production

# Copiar código fuente de Angular
COPY apps/frontend/ ./

# Build de producción
RUN npm run build

# Etapa 2: Servidor Nginx optimizado
FROM nginx:1.25-alpine

# Instalar supervisor para health checks
RUN apk add --no-cache supervisor

# Eliminar configuración default de nginx
RUN rm /etc/nginx/conf.d/default.conf

# Copiar archivos build de Angular
COPY --from=build /app/dist /usr/share/nginx/html

# Configuración optimizada de Nginx
COPY docker/nginx.frontend.conf /etc/nginx/nginx.conf

# Configuración de Supervisor
COPY docker/supervisord.frontend.conf /etc/supervisor/conf.d/supervisord.conf

# Script de entrada
COPY docker/entrypoint.frontend.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Puerto que Railway asignará
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

ENTRYPOINT ["/entrypoint.sh"]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
